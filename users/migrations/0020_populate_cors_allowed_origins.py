# Generated by Django 2.1.11 on 2019-09-02 13:05

from django.db import migrations
from urllib.parse import urlparse


def populate_allowed_origin(apps, schema_editor):
    """Copy of generate_and_save_allowed_origins_from_client_configurations."""

    def _process_uris(uris):
        if isinstance(uris, list):
            return uris
        return uris.splitlines()

    def _generate_origin(uri):
        """Calculates a normalized origin from an arbitrary URI, to be used in
        CORS origin verifications.
        """
        try:
            parsed = urlparse(uri)
            return "{}://{}".format(parsed.scheme, parsed.netloc)
        except ValueError:
            return None

    Application = apps.get_model("users", "Application")
    AllowedOrigin = apps.get_model("users", "AllowedOrigin")
    Client = apps.get_model("oidc_provider", "Client")

    uri_texts = list()

    for manager in [Application.objects, Client.objects]:
        for obj in manager.all():
            for field in ["redirect_uris", "post_logout_redirect_uris"]:
                value = getattr(obj, field, None)
                if value is None or len(value) == 0:
                    continue
                uri_texts.append(value)

    valid_origins = set(
        (_generate_origin(u) for uri_text in uri_texts for u in _process_uris(uri_text))
    )
    persisted_origins = set(AllowedOrigin.objects.values_list("key", flat=True))

    origins_to_add = valid_origins - persisted_origins
    origins_to_delete = persisted_origins - valid_origins

    AllowedOrigin.objects.filter(key__in=origins_to_delete).delete()
    AllowedOrigin.objects.bulk_create(
        (AllowedOrigin(key=key) for key in origins_to_add)
    )


class Migration(migrations.Migration):

    dependencies = [
        ("users", "0019_allowedorigin"),
        ("oidc_provider", "0026_client_multiple_response_types"),
    ]

    operations = [
        migrations.RunPython(populate_allowed_origin, migrations.RunPython.noop),
    ]
